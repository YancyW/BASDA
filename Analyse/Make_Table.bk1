#include "Make_Table.h"
#include "AnalyseClass/File.h"


float Print_file(CDraw &para, float lumi, std::ostream& out, std::vector<std::pair<std::string,AFile_Data> > &fileList){

	Print_Table_Begin(out,"tiny", fileList.size()+3);

	for(unsigned int i=0;i<fileList.size();i++){
		if(i==0){
			if(lumi==0){
				out<< " $\\int L dt ="<<para.scenario.Lumi()<<" fb^{-1} $ & " << "$"<< fileList[i].second.data[0].first<< "$  & ";
				lumi=1;
			}
			else{
				out<< " $\\int L dt ="<<lumi<<" fb^{-1} $ & " << "$"<< fileList[i].second.data[0].first<< "$  & ";
			}
		}
		else if(i==fileList.size()-1){
			out<< "$" <<fileList[i].second.data[0].first<< "$  & efficienty & significance \\\\" <<std::endl;
		}
		else{ 
			out<< "$"<< fileList[i].second.data[0].first<< "$  & ";
		}
	}

	std::vector<float> bk;
	std::vector< std::pair<std::string,std::vector<std::vector<float> > > > data;
	data.resize(para.bkg_sort.Num());
	for(unsigned int k=0;k<para.bkg_sort.Num();k++){
		data[k].second.resize(para.bkg_sort.sort[k].Sub_Num());
		for(unsigned int l=0;l<para.bkg_sort.sort[k].Sub_Num();l++){
			data[k].second[l].resize(fileList[0].second.data.size());
		}
	}
	for(unsigned int j=0;j<fileList[0].second.data.size();j++){
		bk  .push_back(0);
	}

	std::size_t found_class,found_fs; 
	float signal_ori=(fileList[0].second.data)[1].second*lumi;
	//j=0 --> weight 
	//j>=1  --> data after cut
	for(unsigned int j=1;j<fileList[0].second.data.size();j++){
		out<< " \\hline" <<std::endl ;
		float total=0;
		float signal=0;
		for(unsigned int i=0;i<fileList.size();i++){
			for(unsigned int k=0;k<para.bkg_sort.Num();k++){
				found_class = fileList[i].second.data[0].first.find(para.bkg_sort.sort[k].Class());
				if (found_class!=std::string::npos){
					for(unsigned int l=0;l<para.bkg_sort.sort[k].Sub_Num();l++){
						std::string fs_with_brac = para.bkg_sort.sort[k].Default_Sub_Legend(l);
						found_fs= fileList[i].second.data[0].first.find(fs_with_brac);
						if (found_fs!=std::string::npos){
							data[k].second[l][j]+=fileList[i].second.data[j].second*lumi;
						}
					}
					if(k!=0){
						bk[j]+=fileList[i].second.data[j].second*lumi;
					}
				}
			}

			if(i==0){
				out<< "$" << fileList[i].second.data[j].first << "$  & ";
				out<< fileList[i].second.data[j].second*lumi<< " & ";
				signal+=fileList[i].second.data[j].second*lumi;
			}
			else if(i!=0&&i!=fileList.size()-1){
				out<< fileList[i].second.data[j].second*lumi<< " & ";
				total+=fileList[i].second.data[j].second*lumi;
			}
			else if(i!=0&&i==fileList.size()-1){
				total+=fileList[i].second.data[j].second*lumi;
				out<< fileList[i].second.data[j].second*lumi<< " & " << signal/signal_ori << " & " <<signal/std::sqrt(signal+total) << "\\\\"<<std::endl;
			}
			else {
				out<< "what is this?";
			}
		}
	}

	Print_Table_End(out,"tiny");


	// ------------------------------------------------------------------------------------------------------
	// plot table for classified results
	int sort_unzero_num =0;
	for(unsigned int k=0;k<para.bkg_sort.Num();k++){
		for(unsigned int l=0;l<para.bkg_sort.sort[k].Sub_Num();l++){
			if(data[k].second[l][1]!=0){
				sort_unzero_num ++;
			}
		}
	}
	Print_Table_Begin(out,"tiny", sort_unzero_num+4);


	out<< " $\\int L dt =" << para.scenario.Lumi()<<" fb^{-1} $ & ";
	for(unsigned int k=0;k<para.bkg_sort.Num();k++){
		for(unsigned int l=0;l<para.bkg_sort.sort[k].Sub_Num();l++){
			if(data[k].second[l][1]!=0){
				out<< "$"<< para.bkg_sort.sort[k].Legend(l)<< "$  & ";
			}
		}
	}
	out<< "$"<< "total~bk"<< "$  & ";
	out<< " efficienty & significance \\\\" <<std::endl;

	for(unsigned int j=1;j<fileList[0].second.data.size();j++){
		out<< " \\hline" <<std::endl ;
		out<< "$" << fileList[0].second.data[j].first << "$  & ";
		for(unsigned int k=0;k<para.bkg_sort.Num();k++){
			for(unsigned int l=0;l<para.bkg_sort.sort[k].Sub_Num();l++){
				if(data[k].second[l][1]!=0){
					out<< data[k].second[l][j] << " & ";
				}
			}
		}
		if( fileList.size()>1){
			out<< bk  [j]<< " & ";
			out<< data[0].second[0][j]/signal_ori  << " & " <<data[0].second[0][j]/std::sqrt(data[0].second[0][j]+bk[j]) << "\\\\"<<std::endl;
		}
	}

	Print_Table_End(out,"tiny");

	int last_num=fileList[0].second.data.size()-1;
	return(data[0].second[0][last_num]/std::sqrt(data[0].second[0][last_num]+bk[last_num]));
}



float Make_Table(CDraw &para, float lumi, std::vector<std::string> yaml_file,std::string out_file_name,bool IsRecord){


	ShowMessage(2,"make tables");
	ShowMessage(2,"use following input data for significance:");
	std::ofstream out_file;
	out_file.open(out_file_name);


	std::vector<std::pair<std::string,AFile_Data> >  fileList;


	for(unsigned int i=0;i<yaml_file.size();i++){
		if(i==0){
			ShowMessage(2,"sig file",yaml_file[i]);
		}
		else{
			ShowMessage(2,"bkg file",yaml_file[i]);
		}
		YAML::Node file_node = YAML::LoadFile(yaml_file[i]);

		YAML::Node nodes = file_node["filenum"];

		for(YAML::const_iterator it=nodes.begin(); it != nodes.end(); ++it){
			if(it->first.as<std::string>()=="total result"){
				fileList.push_back(std::make_pair(it->first.as<std::string>(),it->second.as<AFile_Data>()));
				break;
			}
		}

	}

	float significance=Print_file(para,lumi,out_file,fileList);
	return(significance);
}


void Make_Table_Pre(CDraw &para){
	AFile file_name;
	get_file_name(para,file_name);

	std::ofstream sig_file;
	sig_file.open(file_name.significance);

	std::vector<std::string> ana_out_name;
	for(int i=0;i<file_name.Output_Num();i++){
		ana_out_name.push_back(file_name.output[i].ana_data);
	}
	float sig = Make_Table(para,para.scenario.Lumi(),ana_out_name,file_name.output_table,true);

	RecordMessage(sig_file,2,"significance is", sig);

	sig_file.close();
}

